/*
测试比较gorm和普通方式的性能差异
测试内容，先查询数据，再改值后写入。每种测试各自负责不同的1000条数据；为了保证公平，普通方式也需要查询所有字段。
gorm主要考虑两个参数，SkipTransaction 和 PrepareStmt，对应四个测试
普通方式使用 prepare， 没有prepare 和 统一使用一个stmt的方式
对应耗时如下（ms）:
gorm(SkipTransaction, PrepareStmt)

	普通方式使用一个stmt	普通方式使用stmt	普通方式不用stmt	gorm(false, false)	gorm(true, false)	gorm(false, true)	gorm(true, true)

1	29848				34646			34836			37974				34761				36253				30323
2	30446				34016			34045			37906				34917				36603				30471
3	32911				36664			36359			38126				36855				37652				32634
4	30786				34212			34222			36187				34693				35718				30730
5	33220				36884			36994			39274				37199				38479				33226
avg	31442.2				35284.4			35291.2			37893.4				36280.6				36941				31476.8

一些想法:
最快的是方式1，即普通方式使用一个stmt，但是这种方式正式场合不太适用。
其次是最后一种方式，gorm(true, ture)，但是使用gorm而不封装成transaction，正式场合使用风险大，需要特别小心，也不太适用。
普通方式是否使用stmt差别不大。
gorm在不 SkipTransaction 的情况下，是否使用stmt还是有些许差别的。
不管是否使用gorm，都应该尽量使用stmt。
*/
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"log"
	"time"
)

type Role struct {
	Id            int    `gorm:"column:id;PRIMARY_KEY"`
	ActivateDays  int    `gorm:"column:activate_days;not null"`
	LastLoginTime int64  `gorm:"column:last_login_time;not null"`
	Data          string `gorm:"column:data;not null"`
}

func (Role) TableName() string {
	return "role"
}

var ch chan string
var dsn string

func main() {
	num := 0
	ch = make(chan string)
	defer close(ch)
	dsn = "root:Abc123..@(192.168.1.88:3306)/test"

	// gorm
	go gormDefault(1, 1000)
	go gormSkipTransactionWithoutPrepare(1001, 2000)
	go gormWithPrepare(2001, 3000)
	go gormSkipTransactionWithPrepare(3001, 4000)

	go normalWithoutPrepare(4001, 5000)
	go normalWithPrepare(5001, 6000)
	go normalWithSinglePrepare(6001, 7000)

	for {
		select {
		case str := <-ch:
			log.Println(str)
			num++
		}

		if num >= 7 {
			return
		}
	}
}

func gormDefault(from, to int) {
	start := time.Now().UnixMilli()
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		SkipDefaultTransaction: false,
		PrepareStmt:            false,
	})
	if err != nil {
		ch <- fmt.Sprintf("gorm default failed: %s", err.Error())
		return
	}
	_sqlDB, _ := db.DB()
	defer _sqlDB.Close()

	var role Role
	for i := from; i <= to; i++ {
		role.Id = i
		db.Select("id, activate_days, last_login_time, data").Where("id = ?", i).Find(&role)
		now := time.Now().Unix()
		role.LastLoginTime = now
		role.ActivateDays++
		err = db.Save(&role).Error
		if err != nil {
			ch <- fmt.Sprintf("gorm default err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("gorm default cost: %d", diff)
}

func gormSkipTransactionWithoutPrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		SkipDefaultTransaction: true,
		PrepareStmt:            false,
	})
	if err != nil {
		ch <- fmt.Sprintf("gorm skip without prepare failed: %s", err.Error())
		return
	}
	_sqlDB, _ := db.DB()
	defer _sqlDB.Close()

	var role Role
	for i := from; i <= to; i++ {
		role.Id = i
		db.Select("id, activate_days, last_login_time, data").Where("id = ?", i).Find(&role)
		now := time.Now().Unix()
		role.LastLoginTime = now
		role.ActivateDays++
		err = db.Save(&role).Error
		if err != nil {
			ch <- fmt.Sprintf("gorm skip without prepare err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("gorm skip without prepare cost: %d", diff)
}

func gormWithPrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		SkipDefaultTransaction: false,
		PrepareStmt:            true,
	})
	if err != nil {
		ch <- fmt.Sprintf("gorm with prepare failed: %s", err.Error())
		return
	}
	_sqlDB, _ := db.DB()
	defer _sqlDB.Close()

	var role Role
	tx := db.Session(&gorm.Session{PrepareStmt: true})
	for i := from; i <= to; i++ {
		role.Id = i
		tx.Select("id, activate_days, last_login_time, data").Where("id = ?", i).Find(&role)
		now := time.Now().Unix()
		role.LastLoginTime = now
		role.ActivateDays++
		err = tx.Save(&role).Error
		if err != nil {
			ch <- fmt.Sprintf("gorm with prepare err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("gorm with prepare cost: %d", diff)
}

func gormSkipTransactionWithPrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{
		SkipDefaultTransaction: true,
		PrepareStmt:            true,
	})
	if err != nil {
		ch <- fmt.Sprintf("gorm skip with prepare failed: %s", err.Error())
		return
	}
	_sqlDB, _ := db.DB()
	defer _sqlDB.Close()

	var role Role
	tx := db.Session(&gorm.Session{PrepareStmt: true})
	for i := from; i <= to; i++ {
		role.Id = i
		tx.Select("id, activate_days, last_login_time, data").Where("id = ?", i).Find(&role)
		now := time.Now().Unix()
		role.LastLoginTime = now
		role.ActivateDays++
		err = tx.Save(&role).Error
		if err != nil {
			ch <- fmt.Sprintf("gorm skip with prepare err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("gorm skip with prepare cost: %d", diff)
}

func normalWithoutPrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		ch <- fmt.Sprintf("normal without prepare failed: %s", err.Error())
		return
	}
	defer db.Close()

	for i := from; i <= to; i++ {
		row := db.QueryRow("SELECT `id`, `activate_days`, `last_login_time`, `data` FROM `role` WHERE `id` = ?", i)
		var id, activateDays sql.NullInt32
		var lastLoginTime sql.NullInt64
		var data sql.NullString
		err = row.Scan(&id, &activateDays, &lastLoginTime, &data)
		if err != nil {
			ch <- fmt.Sprintf("normal without prepare err: %s", err.Error())
			return
		}

		now := time.Now().Unix()
		_, err = db.Exec("UPDATE `role` SET `activate_days` = ?, `last_login_time` = ? WHERE `id` = ?", activateDays.Int32+1, now, i)
		if err != nil {
			ch <- fmt.Sprintf("normal without prepare err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("normal without prepare cost: %d", diff)
}

func normalWithPrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		ch <- fmt.Sprintf("normal with prepare failed: %s", err.Error())
		return
	}
	defer db.Close()

	for i := from; i <= to; i++ {
		stmt, err := db.Prepare("SELECT `id`, `activate_days`, `last_login_time`, `data` FROM `role` WHERE `id` = ?")
		if err != nil {
			ch <- fmt.Sprintf("normal with prepare err: %s", err.Error())
			return
		}
		row := stmt.QueryRow(i)
		var id, activateDays sql.NullInt32
		var lastLoginTime sql.NullInt64
		var data sql.NullString
		err = row.Scan(&id, &activateDays, &lastLoginTime, &data)
		if err != nil {
			ch <- fmt.Sprintf("normal with prepare err: %s", err.Error())
			stmt.Close()
			return
		}
		stmt.Close()

		now := time.Now().Unix()
		stmt2, err := db.Prepare("UPDATE `role` SET `activate_days` = ?, `last_login_time` = ? WHERE `id` = ?")
		if err != nil {
			ch <- fmt.Sprintf("normal with prepare err: %s", err.Error())
			return
		}
		_, err = stmt2.Exec(activateDays.Int32+1, now, i)
		if err != nil {
			ch <- fmt.Sprintf("normal without prepare err: %s", err.Error())
			stmt2.Close()
			return
		}
		stmt2.Close()
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("normal with prepare cost: %d", diff)
}

func normalWithSinglePrepare(from, to int) {
	start := time.Now().UnixMilli()
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		ch <- fmt.Sprintf("normal with single prepare failed: %s", err.Error())
		return
	}
	defer db.Close()

	stmt, err := db.Prepare("SELECT `id`, `activate_days`, `last_login_time`, `data` FROM `role` WHERE `id` = ?")
	if err != nil {
		ch <- fmt.Sprintf("normal with single prepare err: %s", err.Error())
		return
	}
	defer stmt.Close()

	stmt2, err := db.Prepare("UPDATE `role` SET `activate_days` = ?, `last_login_time` = ? WHERE `id` = ?")
	if err != nil {
		ch <- fmt.Sprintf("normal with single prepare err: %s", err.Error())
		return
	}
	defer stmt2.Close()

	for i := from; i <= to; i++ {
		row := stmt.QueryRow(i)
		var id, activateDays sql.NullInt32
		var lastLoginTime sql.NullInt64
		var data sql.NullString
		err = row.Scan(&id, &activateDays, &lastLoginTime, &data)
		if err != nil {
			ch <- fmt.Sprintf("normal with single prepare err: %s", err.Error())
			return
		}

		now := time.Now().Unix()
		_, err = stmt2.Exec(activateDays.Int32+1, now, i)
		if err != nil {
			ch <- fmt.Sprintf("normal with single prepare err: %s", err.Error())
			return
		}
	}

	diff := time.Now().UnixMilli() - start
	ch <- fmt.Sprintf("normal with single prepare cost: %d", diff)
}
